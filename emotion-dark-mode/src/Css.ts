import { Properties as Properties1 } from "csstype";

// This file is auto-generated by truss: https://github.com/homebound-team/truss.

/** Given a type X, and the user's proposed type T, only allow keys in X and nothing else. */
export type Only<X, T> = X & Record<Exclude<keyof T, keyof X>, never>;

export type Properties = Properties1;

// prettier-ignore
class CssBuilder<T extends Properties1> {
  constructor(
    public rules: T,
    private enabled: boolean,
    private _important: boolean,
    private selector: string | undefined
  ) {}

  // borderColorRules
  get bPrimary() { return this.add("borderColor", "var(--Primary)"); }
  get bSecondary() { return this.add("borderColor", "var(--Secondary)"); }
  get bThird() { return this.add("borderColor", "var(--Third)"); }

  // borderRadiusRules
  get br0() { return this.add("borderRadius", "0"); }
  get br1() { return this.add("borderRadius", ".125rem"); }
  get br2() { return this.add("borderRadius", ".25rem"); }
  get br3() { return this.add("borderRadius", ".5rem"); }
  get br4() { return this.add("borderRadius", "1rem"); }
  get br100() { return this.add("borderRadius", "100%"); }
  get brPill() { return this.add("borderRadius", "9999px"); }

  // borderRules
  get ba() { return this.add("borderStyle", "solid").add("borderWidth", "1px"); }
  get bt() { return this.add("borderTopStyle", "solid").add("borderTopWidth", "1px"); }
  get br() { return this.add("borderRightStyle", "solid").add("borderRightWidth", "1px"); }
  get bb() { return this.add("borderBottomStyle", "solid").add("borderBottomWidth", "1px"); }
  get bl() { return this.add("borderLeftStyle", "solid").add("borderLeftWidth", "1px"); }
  get bn() { return this.add("borderStyle", "none").add("borderWidth", "0"); }

  // boxShadowRules
  get shadowNone() { return this.add("boxShadow", "none"); }

  // coordinateRules
  get top0() { return this.top(0); }
  get top1() { return this.top(1); }
  get top2() { return this.top(2); }
  get top3() { return this.top(3); }
  get top4() { return this.top(4); }
  get top5() { return this.top(5); }
  get top6() { return this.top(6); }
  get top7() { return this.top(7); }
  top(inc: number | string) { return this.add("top", maybeInc(inc)); }
  get right0() { return this.right(0); }
  get right1() { return this.right(1); }
  get right2() { return this.right(2); }
  get right3() { return this.right(3); }
  get right4() { return this.right(4); }
  get right5() { return this.right(5); }
  get right6() { return this.right(6); }
  get right7() { return this.right(7); }
  right(inc: number | string) { return this.add("right", maybeInc(inc)); }
  get bottom0() { return this.bottom(0); }
  get bottom1() { return this.bottom(1); }
  get bottom2() { return this.bottom(2); }
  get bottom3() { return this.bottom(3); }
  get bottom4() { return this.bottom(4); }
  get bottom5() { return this.bottom(5); }
  get bottom6() { return this.bottom(6); }
  get bottom7() { return this.bottom(7); }
  bottom(inc: number | string) { return this.add("bottom", maybeInc(inc)); }
  get left0() { return this.left(0); }
  get left1() { return this.left(1); }
  get left2() { return this.left(2); }
  get left3() { return this.left(3); }
  get left4() { return this.left(4); }
  get left5() { return this.left(5); }
  get left6() { return this.left(6); }
  get left7() { return this.left(7); }
  left(inc: number | string) { return this.add("left", maybeInc(inc)); }

  // cursorRules
  get cursorPointer() { return this.add("cursor", "pointer"); }

  // displayRules
  get dn() { return this.add("display", "none"); }
  get db() { return this.add("display", "block"); }
  get dib() { return this.add("display", "inlineBlock"); }
  get dit() { return this.add("display", "inlineTable"); }
  get dt() { return this.add("display", "table"); }
  get dtc() { return this.add("display", "tableCell"); }
  get dtRow() { return this.add("display", "tableRow"); }
  get dtColumn() { return this.add("display", "tableColumn"); }
  get dtColumnGroup() { return this.add("display", "tableColumnGroup"); }
  get dg() { return this.add("display", "grid"); }
  get df() { return this.add("display", "flex"); }
  get dif() { return this.add("display", "inline-flex"); }
  display(value: Properties["display"]) { return this.add("display", value); }

  // flexboxRules
  get justifyStart() { return this.add("justifyContent", "flex-start"); }
  get justifyEnd() { return this.add("justifyContent", "flex-end"); }
  get justifyCenter() { return this.add("justifyContent", "center"); }
  get justifyBetween() { return this.add("justifyContent", "space-between"); }
  get justifyAround() { return this.add("justifyContent", "space-around"); }
  justify(value: Properties["justifyContent"]) { return this.add("justifyContent", value); }
  get selfStart() { return this.add("alignSelf", "flex-start"); }
  get selfEnd() { return this.add("alignSelf", "flex-end"); }
  get selfCenter() { return this.add("alignSelf", "center"); }
  get selfBaseline() { return this.add("alignSelf", "baseline"); }
  get selfStretch() { return this.add("alignSelf", "stretch"); }
  self(value: Properties["alignSelf"]) { return this.add("alignSelf", value); }
  get itemsStart() { return this.add("alignItems", "flex-start"); }
  get itemsEnd() { return this.add("alignItems", "flex-end"); }
  get itemsCenter() { return this.add("alignItems", "center"); }
  get itemsBaseline() { return this.add("alignItems", "baseline"); }
  get itemsStretch() { return this.add("alignItems", "stretch"); }
  items(value: Properties["alignItems"]) { return this.add("alignItems", value); }
  get fb1() { return this.add("flexBasis", "100%"); }
  get fb2() { return this.add("flexBasis", "50%"); }
  get fb3() { return this.add("flexBasis", "33.333333%"); }
  get fb4() { return this.add("flexBasis", "25%"); }
  get fb5() { return this.add("flexBasis", "20%"); }
  get fb6() { return this.add("flexBasis", "16.666666%"); }
  get fb7() { return this.add("flexBasis", "14.285714%"); }
  get fb0() { return this.add("flexBasis", "12.5%"); }
  fb(value: Properties["flexBasis"]) { return this.add("flexBasis", value); }
  get flexAuto() { return this.add("flex", "auto"); }
  get flexNone() { return this.add("flex", "none"); }
  flex(value: Properties["flex"]) { return this.add("flex", value); }
  get fg0() { return this.add("flexGrow", 0); }
  get fg1() { return this.add("flexGrow", 1); }
  flexGrow(value: Properties["flexGrow"]) { return this.add("flexGrow", value); }
  get fs0() { return this.add("flexShrink", 0); }
  get fs1() { return this.add("flexShrink", 1); }
  flexShrink(value: Properties["flexShrink"]) { return this.add("flexShrink", value); }
  get flexRow() { return this.add("flexDirection", "row"); }
  get flexRowReverse() { return this.add("flexDirection", "row-reverse"); }
  get flexColumn() { return this.add("flexDirection", "column"); }
  get flexColumnReverse() { return this.add("flexDirection", "column-reverse"); }
  flexDirection(value: Properties["flexDirection"]) { return this.add("flexDirection", value); }

  // heightRules
  get h25() { return this.add("height", "25%"); }
  get h50() { return this.add("height", "50%"); }
  get h75() { return this.add("height", "75%"); }
  get h100() { return this.add("height", "100%"); }
  get h0() { return this.h(0); }
  get h1() { return this.h(1); }
  get h2() { return this.h(2); }
  get h3() { return this.h(3); }
  get h4() { return this.h(4); }
  get h5() { return this.h(5); }
  get h6() { return this.h(6); }
  get h7() { return this.h(7); }
  h(inc: number | string) { return this.add("height", maybeInc(inc)); }

  // outlineRules
  get outline() { return this.add("outline", "1px solid"); }
  get outlineTransparent() { return this.add("outline", "1px solid transparent"); }
  get outline0() { return this.add("outline", "0"); }

  // positionRules
  get absolute() { return this.add("position", "absolute"); }
  get fixed() { return this.add("position", "fixed"); }
  get static() { return this.add("position", "static"); }
  get relative() { return this.add("position", "relative"); }
  get sticky() { return this.add("position", "sticky"); }

  // skinRules
  get primary() { return this.add("color", "var(--Primary)"); }
  get secondary() { return this.add("color", "var(--Secondary)"); }
  get third() { return this.add("color", "var(--Third)"); }
  color(value: string) { return this.add("color", value); }
  get bgPrimary() { return this.add("backgroundColor", "var(--Primary)"); }
  get bgSecondary() { return this.add("backgroundColor", "var(--Secondary)"); }
  get bgThird() { return this.add("backgroundColor", "var(--Third)"); }
  bgColor(value: string) { return this.add("backgroundColor", value); }

  // spacingRules
  get mt0() { return this.mt(0); }
  get mt1() { return this.mt(1); }
  get mt2() { return this.mt(2); }
  get mt3() { return this.mt(3); }
  get mt4() { return this.mt(4); }
  get mt5() { return this.mt(5); }
  get mt6() { return this.mt(6); }
  get mt7() { return this.mt(7); }
  mt(inc: number | string) { return this.add("marginTop", maybeInc(inc)); }
  get mr0() { return this.mr(0); }
  get mr1() { return this.mr(1); }
  get mr2() { return this.mr(2); }
  get mr3() { return this.mr(3); }
  get mr4() { return this.mr(4); }
  get mr5() { return this.mr(5); }
  get mr6() { return this.mr(6); }
  get mr7() { return this.mr(7); }
  mr(inc: number | string) { return this.add("marginRight", maybeInc(inc)); }
  get mb0() { return this.mb(0); }
  get mb1() { return this.mb(1); }
  get mb2() { return this.mb(2); }
  get mb3() { return this.mb(3); }
  get mb4() { return this.mb(4); }
  get mb5() { return this.mb(5); }
  get mb6() { return this.mb(6); }
  get mb7() { return this.mb(7); }
  mb(inc: number | string) { return this.add("marginBottom", maybeInc(inc)); }
  get ml0() { return this.ml(0); }
  get ml1() { return this.ml(1); }
  get ml2() { return this.ml(2); }
  get ml3() { return this.ml(3); }
  get ml4() { return this.ml(4); }
  get ml5() { return this.ml(5); }
  get ml6() { return this.ml(6); }
  get ml7() { return this.ml(7); }
  ml(inc: number | string) { return this.add("marginLeft", maybeInc(inc)); }
  get mx0() { return this.mx(0); }
  get mx1() { return this.mx(1); }
  get mx2() { return this.mx(2); }
  get mx3() { return this.mx(3); }
  get mx4() { return this.mx(4); }
  get mx5() { return this.mx(5); }
  get mx6() { return this.mx(6); }
  get mx7() { return this.mx(7); }
  mx(inc: number | string) { return this.ml(inc).mr(inc); }
  get my0() { return this.my(0); }
  get my1() { return this.my(1); }
  get my2() { return this.my(2); }
  get my3() { return this.my(3); }
  get my4() { return this.my(4); }
  get my5() { return this.my(5); }
  get my6() { return this.my(6); }
  get my7() { return this.my(7); }
  my(inc: number | string) { return this.mt(inc).mb(inc); }
  get m0() { return this.m(0); }
  get m1() { return this.m(1); }
  get m2() { return this.m(2); }
  get m3() { return this.m(3); }
  get m4() { return this.m(4); }
  get m5() { return this.m(5); }
  get m6() { return this.m(6); }
  get m7() { return this.m(7); }
  m(inc: number | string) { return this.mt(inc).mb(inc).mr(inc).ml(inc); }
  get pt0() { return this.pt(0); }
  get pt1() { return this.pt(1); }
  get pt2() { return this.pt(2); }
  get pt3() { return this.pt(3); }
  get pt4() { return this.pt(4); }
  get pt5() { return this.pt(5); }
  get pt6() { return this.pt(6); }
  get pt7() { return this.pt(7); }
  pt(inc: number | string) { return this.add("paddingTop", maybeInc(inc)); }
  get pr0() { return this.pr(0); }
  get pr1() { return this.pr(1); }
  get pr2() { return this.pr(2); }
  get pr3() { return this.pr(3); }
  get pr4() { return this.pr(4); }
  get pr5() { return this.pr(5); }
  get pr6() { return this.pr(6); }
  get pr7() { return this.pr(7); }
  pr(inc: number | string) { return this.add("paddingRight", maybeInc(inc)); }
  get pb0() { return this.pb(0); }
  get pb1() { return this.pb(1); }
  get pb2() { return this.pb(2); }
  get pb3() { return this.pb(3); }
  get pb4() { return this.pb(4); }
  get pb5() { return this.pb(5); }
  get pb6() { return this.pb(6); }
  get pb7() { return this.pb(7); }
  pb(inc: number | string) { return this.add("paddingBottom", maybeInc(inc)); }
  get pl0() { return this.pl(0); }
  get pl1() { return this.pl(1); }
  get pl2() { return this.pl(2); }
  get pl3() { return this.pl(3); }
  get pl4() { return this.pl(4); }
  get pl5() { return this.pl(5); }
  get pl6() { return this.pl(6); }
  get pl7() { return this.pl(7); }
  pl(inc: number | string) { return this.add("paddingLeft", maybeInc(inc)); }
  get px0() { return this.px(0); }
  get px1() { return this.px(1); }
  get px2() { return this.px(2); }
  get px3() { return this.px(3); }
  get px4() { return this.px(4); }
  get px5() { return this.px(5); }
  get px6() { return this.px(6); }
  get px7() { return this.px(7); }
  px(inc: number | string) { return this.pl(inc).pr(inc); }
  get py0() { return this.py(0); }
  get py1() { return this.py(1); }
  get py2() { return this.py(2); }
  get py3() { return this.py(3); }
  get py4() { return this.py(4); }
  get py5() { return this.py(5); }
  get py6() { return this.py(6); }
  get py7() { return this.py(7); }
  py(inc: number | string) { return this.pt(inc).pb(inc); }
  get p0() { return this.p(0); }
  get p1() { return this.p(1); }
  get p2() { return this.p(2); }
  get p3() { return this.p(3); }
  get p4() { return this.p(4); }
  get p5() { return this.p(5); }
  get p6() { return this.p(6); }
  get p7() { return this.p(7); }
  p(inc: number | string) { return this.pt(inc).pb(inc).pr(inc).pl(inc); }

  // textAlignRules
  get tl() { return this.add("textAlign", "left"); }
  get tc() { return this.add("textAlign", "center"); }
  get tr() { return this.add("textAlign", "right"); }
  get tj() { return this.add("textAlign", "justify"); }

  // textDecorationRules
  get noUnderline() { return this.add("textDecoration", "none"); }
  get strike() { return this.add("textDecoration", "line-through"); }
  get underline() { return this.add("textDecoration", "underline"); }

  // typeScaleRules
  get f10() { return this.add("fontSize", "10px"); }
  get f12() { return this.add("fontSize", "12px"); }
  get f14() { return this.add("fontSize", "14px"); }
  get f24() { return this.add("fontSize", "24px"); }

  // whitespaceRules
  get nowrap() { return this.add("whiteSpace", "nowrap"); }
  get pre() { return this.add("whiteSpace", "pre"); }
  get wsNormal() { return this.add("whiteSpace", "normal"); }

  // widthRules
  get w25() { return this.add("width", "25%"); }
  get w50() { return this.add("width", "50%"); }
  get w75() { return this.add("width", "75%"); }
  get w100() { return this.add("width", "100%"); }
  get mw0() { return this.add("minWidth", 0); }
  get mw100() { return this.add("minWidth", "100%"); }
  mw(value: Properties["minWidth"]) { return this.add("minWidth", value); }
  get w0() { return this.w(0); }
  get w1() { return this.w(1); }
  get w2() { return this.w(2); }
  get w3() { return this.w(3); }
  get w4() { return this.w(4); }
  get w5() { return this.w(5); }
  get w6() { return this.w(6); }
  get w7() { return this.w(7); }
  w(inc: number | string) { return this.add("width", maybeInc(inc)); }

  // visibilityRules
  get visible() { return this.add("visibility", "visible"); }
  get invisible() { return this.add("visibility", "hidden"); }

  // zIndexRules
  get z0() { return this.add("zIndex", 0); }
  get z1() { return this.add("zIndex", 1); }
  get z2() { return this.add("zIndex", 2); }
  get z3() { return this.add("zIndex", 3); }
  get z4() { return this.add("zIndex", 4); }
  get z5() { return this.add("zIndex", 5); }
  get z999() { return this.add("zIndex", 999); }
  get z9999() { return this.add("zIndex", 9999); }
  get zInherit() { return this.add("zIndex", "inherit"); }
  get zInitial() { return this.add("zIndex", "initial"); }
  get zUnset() { return this.add("zIndex", "unset"); }
  z(value: Properties["zIndex"]) { return this.add("zIndex", value); }

  // modes
  get darkMode() { return this.add("--Primary" as any, "black").add("--Secondary" as any, "white").add("--Third" as any, "blue"); }
  get whiteMode() { return this.add("--Primary" as any, "white").add("--Secondary" as any, "black").add("--Third" as any, "blue"); }
  
  get $(): T { return maybeImportant(sortObject(this.rules), this._important); }

  if(t: boolean | Breakpoint) {
    if (typeof t === "boolean") {
      return new CssBuilder<T>(this.rules, t, this._important, this.selector);
    } else {
      return new CssBuilder<T>(this.rules, this.enabled, this._important, t as string);
    }
  }

  get else() {
    if (this.selector !== undefined) {
      throw new Error("else is not supported with if(selector)");
    }
    return new CssBuilder<T>(this.rules, !this.enabled, this._important, this.selector);
  }

  get important() { return new CssBuilder<T>(this.rules, this.enabled, true, this.selector); }

  /** Adds new properties, either a specific key/value, or a Properties object, the current css. */
  add<P extends Properties>(prop: P): CssBuilder<T & P>;
  add<K extends keyof Properties, V extends Properties[K]>(prop: K, value: V): CssBuilder<T & { [U in K]: V }>;
  add<K extends keyof Properties, V extends Properties[K]>(propOrProperties: K | Properties, value?: V): CssBuilder<any> {
    const newRules = typeof propOrProperties === "string" ?  { [propOrProperties]: value } : propOrProperties;
    const rules = this.selector
      ? { ...this.rules, [this.selector]: { ...(this.rules as any)[this.selector], ...newRules } }
      : this.enabled ? { ...this.rules, ...newRules } : this.rules;
    return new CssBuilder(rules as any, this.enabled, this._important, this.selector);
  }
}

/** Emotion treats the same rules, ordered differently as different classes, but naively they can be the same. */
function sortObject<T extends object>(obj: T): T {
  return Object.keys(obj)
    .sort()
    .reduce((acc, key) => {
      acc[key as keyof T] = obj[key as keyof T];
      return acc;
    }, ({} as any) as T) as T;
}

/** Conditionally adds `important!` to everything. */
function maybeImportant<T extends object>(obj: T, important: boolean): T {
  if (important) {
    Object.keys(obj).forEach((key) => {
      (obj as any)[key] = `${(obj as any)[key]} !important`;
    });
  }
  return obj;
}

/** Converts `inc` into pixels value with a `px` suffix. */
export function maybeInc(inc: number | string): string {
  return typeof inc === "string" ? inc : `${increment(inc)}px`;
}

/** Converts `inc` into pixels. */
export function increment(inc: number): number {
  return inc * 6;
}

/** Convert `pixels` to a `px` units string so it's not ambiguous. */
export function px(pixels: number): string {
  return `${pixels}px`;
}

/** An entry point for Css expressions. CssBuilder is immutable so this is safe to share. */
export const Css = new CssBuilder({}, true, false, undefined);

export type Margin =
  | "margin"
  | "marginTop"
  | "marginRight"
  | "marginBottom"
  | "marginLeft";

export type Padding =
  | "padding"
  | "paddingTop"
  | "paddingRight"
  | "paddingBottom"
  | "paddingLeft";

type Brand<K, T> = K & { __brand: T };
type Breakpoint = Brand<string, "Breakpoint">;
export const sm = "@media screen and (max-width:599px)" as Breakpoint;
export const md = "@media screen and (min-width:600px) and (max-width:959px)" as Breakpoint;
export const smOrMd = "@media screen and (max-width:959px)" as Breakpoint;
export const mdAndUp = "@media screen and (min-width:600px)" as Breakpoint;
export const mdAndDown = "@media screen and (max-width:959px)" as Breakpoint;
export const lg = "@media screen and (min-width:960px)" as Breakpoint;
export const mdOrLg = "@media screen and (min-width:600px)" as Breakpoint;
